;----------------------------------------------------------------
; 进入一场战斗
; 战斗结果要怎么区分各种情况，有逃跑吗，待定。总之先只考虑 -1未知 0战败 1战胜
; duelMode
; 0 常规死斗(目标是把对方血量打光，可以逃跑)
; 1 友好切磋(具体规则没设计，大概就是打了半血就会退场，先不考虑)
; 其它模式待设计
;----------------------------------------------------------------
@BATTLE_START(enemyTeam, duelMode = 0)
    #DIMS enemyTeam
    #DIM duelMode
    #DIM battleResult
    #DIM loopCount
    #DIM insID

    ; 初始化敌人 将来封装起来 不同类型的战斗要有不同的初始化方法
    SPLIT enemyTeam, ",", LOCALS
    REPEAT RESULT
        insID = New_Chara(TOINT(LOCALS:COUNT))
        CFLAG:insID:TEAM = 2
        BASE:insID:体力 = MAXBASE:insID:体力
        BASE:insID:魔力 = MAXBASE:insID:魔力
        BASE:insID:性欲 = 100
        BASE:insID:快感 = 100
        CFLAG:insID:战斗计时器 = 0
        ENEMY_POS:COUNT = insID
    REND
    ; 暴力导入敌人队伍
    FLAG:ENEMYMEMBER1 = 5
    FLAG:ENEMYMEMBER2 = 6
    FLAG:ENEMYMEMBER3 = 7
    FLAG:ENEMYMEMBER4 = 8

    ; CALL BATTLE_FIRST_PLAYER

    ; debug
    FOR loopCount, 0, 4
        LOCALS = TEAMMEMBER%TOSTR(loopCount + 1)%
        PRINTFORML %NAME:(FLAG:LOCALS)%
    NEXT
    RETURN


;----------------------------------------------------------------
; 临时测试用：导入玩家队伍
;----------------------------------------------------------------
@Temp_Import_PlayerTeam(playerTeam)
    #DIMS playerTeam
    #DIM insID

    SPLIT playerTeam, ",", LOCALS
    REPEAT RESULT
        insID = New_Chara(TOINT(LOCALS:COUNT))
        CFLAG:insID:TEAM = 1
        BASE:insID:体力 = MAXBASE:insID:体力
        BASE:insID:魔力 = MAXBASE:insID:魔力
        BASE:insID:性欲 = 100
        BASE:insID:快感 = 100
        CFLAG:insID:战斗计时器 = 0
        PLAYER_POS:COUNT = insID
    REND

    ; 先暴力导入
    FLAG:TEAMMEMBER1 = 1
    FLAG:TEAMMEMBER2 = 2
    FLAG:TEAMMEMBER3 = 3
    FLAG:TEAMMEMBER4 = 4

    RETURN

;----------------------------------------------------------------
; 战斗逻辑帧
;----------------------------------------------------------------
@Battle_Tick()
    #DIM currentCharaID
    #DIM currentCharaTimer

    currentCharaID = -1
    currentCharaTimer = TimeBar
    ; 计算行动条，如果有角色计时器大于TimeBar(目前是1000)，那么该角色可能行动
    ; 有多个可动角色时，计时器高者优先行动；计时器相同时，玩家阵营优先行动；阵营相同时，前排优先行动
    REPEAT 4
        CFLAG:(PLAYER_POS:COUNT):战斗计时器 += CFLAG:(PLAYER_POS:COUNT):速度
        IF CFLAG:(PLAYER_POS:COUNT):战斗计时器 > currentCharaTimer
            currentCharaTimer = CFLAG:(PLAYER_POS:COUNT):战斗计时器
            currentCharaID = PLAYER_POS:COUNT
        ENDIF
    REND
    REPEAT 4
        CFLAG:(ENEMY_POS:COUNT):战斗计时器 += CFLAG:(ENEMY_POS:COUNT):速度
        IF CFLAG:(ENEMY_POS:COUNT):战斗计时器 > currentCharaTimer
            currentCharaTimer = CFLAG:(ENEMY_POS:COUNT):战斗计时器
            currentCharaID = ENEMY_POS:COUNT
        ENDIF
    REND
    ; 当前可动角色减少TimeBar，然后进入行动
    IF currentCharaID > 0
        CFLAG:currentCharaID:战斗计时器 -= TimeBar
        CALL Battle_Round(currentCharaID)
    ENDIF

    RETURN

;----------------------------------------------------------------
; 角色行动回合
;----------------------------------------------------------------
@Battle_Round(currentCharaID)
    #DIM currentCharaID
    #DIMS RoundStartEventObj

        ; 目前只需要一个角色ID参数，如果要玩点花的比如加入换手机制，就要再添加一个reason参数表明这个回合是为什么开始
        RoundStartEventObj:0 = TOSTR(currentCharaID)
        CALL Trigger_Event("回合开始", RoundStartEventObj)
        ; 玩家角色
        IF CFLAG:currentCharaID:TEAM == 1
            CALL Trigger_Event("玩家操控", RoundStartEventObj)
        ; 非玩家角色，目前只考虑敌人，是敌人角色就进敌人AI
        ELSE
            CALL Trigger_Event("AI操控", RoundStartEventObj)
        ENDIF
        ; TODO: 获取操控结果，结算行动
        CALL Trigger_Event("回合结束", RoundStartEventObj)
    RETURN

;----------------------------------------------------------------
; 自动向前排位移，只发生在战斗开始时以及有单位脱战时
;----------------------------------------------------------------
@Battle_AutoMove(isBattleStart = FALSE)
    #DIM isBattleStart
    #DIM pos

    ; 遍历位置1~3，如果有空位，把空ID位移到最后排
    FOR pos, 1, 4
        IF PLAYER_POS:pos == 0
            CALLF Battle_MoveExecute(pos, 3)
        ENDIF
    NEXT

;----------------------------------------------------------------
; 单位主动位移，需要征求队友同意
;----------------------------------------------------------------
@Battle_MoveRequest(pos, distance)
    #DIM pos
    #DIM distance

    ; TODO: 判断自己是否能移动、判断目标是否在边界内、判断目标是否同意

;----------------------------------------------------------------
; 单位位移执行，distance为正时向后运动，否则向前运动
; 返回移动距离
;----------------------------------------------------------------
@Battle_MoveExecute(fromPos, distance)
#FUNCTION
    #DIM fromPos
    #DIM toPos
    #DIM distance
    #DIM isBack
    #DIM isEnemy
    #DIM iter
    #DIM chara_ID
    #DIMS eventObj
    #DIM deltaDistance
    
    isEnemy = TRUE
    IF fromPos < 0
        ; 如果是玩家坐标，先转化成正数，方便计算
        fromPos *= -1
        isEnemy = FALSE
    ENDIF

    IF distance > 0
        isBack = TRUE
    ELSE
        isBack = FALSE
    ENDIF

    toPos = fromPos + distance
    ; 边界判断
    SIF toPos < 0
        toPos = 0
    SIF toPos > 4
        toPos = 4
    ; 实际移动距离
    deltaDistance = toPos - fromPos

    ; 从fromPos取出要移动的角色ID
    chara_ID = %zone%:fromPos
    ; 将移动途经的角色都移动1位
    IF isBack
        FOR iter, fromPos, toPos
            IF isEnemy
                ENEMY_POS:iter = ENEMY_POS:(iter + 1)
            ELSE
                PLAYER_POS:iter = PLAYER_POS:(iter + 1)
            ENDIF
        NEXT
    ELSE
        FOR iter, fromPos, toPos, -1
            IF isEnemy
                ENEMY_POS:iter = ENEMY_POS:(iter - 1)
            ELSE
                PLAYER_POS:iter = PLAYER_POS:(iter - 1)
            ENDIF
        NEXT
    ENDIF
    ; 最后插入到toPos
    IF isEnemy
        ENEMY_POS:toPos = chara_ID
    ELSE
        PLAYER_POS:toPos = chara_ID
    ENDIF

    eventObj:0 = TOSTR(chara_ID)
    eventObj:1 = TOSTR(deltaDistance)

    CALL Trigger_Event("角色位移", eventObj)

    RETURNF deltaDistance
